{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, Subscription, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nclass _MatDialogContainerBase extends BasePortalOutlet {\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n  /** The dialog configuration. */\n  _config, _interactivityChecker, _ngZone, _focusMonitor) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._config = _config;\n    this._interactivityChecker = _interactivityChecker;\n    this._ngZone = _ngZone;\n    this._focusMonitor = _focusMonitor;\n    /** Emits when an animation state changes. */\n\n    this._animationStateChanged = new EventEmitter();\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachDomPortal(portal);\n    };\n\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n  /** Initializes the dialog container with the attached content. */\n\n\n  _initializeWithAttachedContent() {\n    this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n    // when the dialog closes.\n\n\n    this._capturePreviouslyFocusedElement();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Moves focus back into the dialog if it was moved out. */\n\n\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n\n\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('blur', () => element.removeAttribute('tabindex'));\n        element.addEventListener('mousedown', () => element.removeAttribute('tabindex'));\n      });\n    }\n\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n\n\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n\n\n  _trapFocus() {\n    const element = this._elementRef.nativeElement; // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n    // dialog. If the element inside the dialog can't be focused, then the container is focused\n    // so the user can't tab into other elements behind it.\n\n    switch (this._config.autoFocus) {\n      case false:\n      case 'dialog':\n        // Ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        if (!this._containsFocus()) {\n          element.focus();\n        }\n\n        break;\n\n      case true:\n      case 'first-tabbable':\n        this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n          // If we weren't able to find a focusable element in the dialog, then focus the dialog\n          // container instead.\n          if (!focusedSuccessfully) {\n            this._focusDialogContainer();\n          }\n        });\n\n        break;\n\n      case 'first-heading':\n        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n        break;\n\n      default:\n        this._focusByCssSelector(this._config.autoFocus);\n\n        break;\n    }\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n\n\n  _restoreFocus() {\n    const previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n    if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n          this._closeInteractionType = null;\n        } else {\n          previousElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Sets up the focus trap. */\n\n\n  _setupFocusTrap() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n  }\n  /** Captures the element that was focused before the dialog was opened. */\n\n\n  _capturePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n    }\n  }\n  /** Focuses the dialog container. */\n\n\n  _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n\n\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n\n    const activeElement = _getFocusedElementPierceShadowDom();\n\n    return element === activeElement || element.contains(activeElement);\n  }\n\n}\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatDialogContainerBase,\n  viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nclass MatDialogContainer extends _MatDialogContainerBase {\n  constructor() {\n    super(...arguments);\n    /** State of the dialog animation. */\n\n    this._state = 'enter';\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _onAnimationDone({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._trapFocus();\n\n      this._animationStateChanged.next({\n        state: 'opened',\n        totalTime\n      });\n    } else if (toState === 'exit') {\n      this._restoreFocus();\n\n      this._animationStateChanged.next({\n        state: 'closed',\n        totalTime\n      });\n    }\n  }\n  /** Callback, invoked when an animation on the host starts. */\n\n\n  _onAnimationStart({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._animationStateChanged.next({\n        state: 'opening',\n        totalTime\n      });\n    } else if (toState === 'exit' || toState === 'void') {\n      this._animationStateChanged.next({\n        state: 'closing',\n        totalTime\n      });\n    }\n  }\n  /** Starts the dialog exit animation. */\n\n\n  _startExitAnimation() {\n    this._state = 'exit'; // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nMatDialogContainer.ɵfac = /* @__PURE__ */function () {\n  let ɵMatDialogContainer_BaseFactory;\n  return function MatDialogContainer_Factory(t) {\n    return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer);\n  };\n}();\n\nMatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._id);\n      i0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [i3.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nclass MatDialogRef {\n  constructor(_overlayRef, _containerInstance,\n  /** Id of the dialog. */\n  id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance = null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(event => {\n      event.preventDefault();\n\n      _closeDialogVia(this, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(this, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._afterClosed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._overlayRef.updateSize({\n      width,\n      height\n    });\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._overlayRef.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._overlayRef.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* CLOSED */\n    ;\n\n    this._overlayRef.dispose();\n  }\n  /** Fetches the position strategy object from the overlay ref. */\n\n\n  _getPositionStrategy() {\n    return this._overlayRef.getConfig().positionStrategy;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nclass _MatDialogBase {\n  constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, _animationMode) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._animationMode = _animationMode;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    this._dialogAnimatingOpen = false; // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    } // If there is a dialog that is currently animating open, return the MatDialogRef of that dialog\n\n\n    if (this._dialogAnimatingOpen) {\n      return this._lastDialogRef;\n    }\n\n    const overlayRef = this._createOverlay(config);\n\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n    if (this._animationMode !== 'NoopAnimations') {\n      const animationStateSubscription = dialogContainer._animationStateChanged.subscribe(dialogAnimationEvent => {\n        if (dialogAnimationEvent.state === 'opening') {\n          this._dialogAnimatingOpen = true;\n        }\n\n        if (dialogAnimationEvent.state === 'opened') {\n          this._dialogAnimatingOpen = false;\n          animationStateSubscription.unsubscribe();\n        }\n      });\n\n      if (!this._animationStateSubscriptions) {\n        this._animationStateSubscriptions = new Subscription();\n      }\n\n      this._animationStateSubscriptions.add(animationStateSubscription);\n    }\n\n    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    this._lastDialogRef = dialogRef; // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n    dialogContainer._initializeWithAttachedContent();\n\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete(); // Clean up any subscriptions to dialogs that never finished opening.\n\n\n    if (this._animationStateSubscriptions) {\n      this._animationStateSubscriptions.unsubscribe();\n    }\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = this._getOverlayConfig(config);\n\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n\n\n  _getOverlayConfig(dialogConfig) {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n\n\n  _attachDialogContainer(overlay, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatDialogConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping dialog container.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n\n\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer);\n\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param dialogContainer Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n\n\n  _createInjector(config, dialogRef, dialogContainer) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n    // content are created out of the same `ViewContainerRef` and as such, are siblings\n    // for injector purposes. To allow the hierarchy that is expected, the dialog\n    // container is explicitly provided in the injector.\n\n    const providers = [{\n      provide: this._dialogContainerType,\n      useValue: dialogContainer\n    }, {\n      provide: this._dialogDataToken,\n      useValue: config.data\n    }, {\n      provide: this._dialogRefConstructor,\n      useValue: dialogRef\n    }];\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n\n\n  _removeOpenDialog(dialogRef) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        this._getAfterAllClosed().next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n\n\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  /** Closes all of the dialogs in an array. */\n\n\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatDialogBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatDialogBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.InjectionToken\n    }, {\n      type: undefined\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nclass MatDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  location, defaultOptions, scrollStrategy, parentDialog, overlayContainer, animationMode) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n  }\n\n}\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nclass MatDialogClose {\n  constructor(\n  /**\n   * Reference to the containing dialog.\n   * @deprecated `dialogRef` property to become private.\n   * @breaking-change 13.0.0\n   */\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n\n}\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nclass MatDialogTitle {\n  constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n\n}\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nclass MatDialogContent {}\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nclass MatDialogActions {}\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatDialogModule {}\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["/Users/eric.ferreira/Sources/Eric_Repositories/ag-table/node_modules/@angular/material/fesm2015/dialog.mjs"],"names":["i1$1","Overlay","OverlayConfig","OverlayModule","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","i0","EventEmitter","Directive","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","Subject","defer","Subscription","of","filter","take","startWith","_getFocusedElementPierceShadowDom","i2","DOCUMENT","trigger","state","style","transition","animate","i1","ESCAPE","hasModifierKey","ANIMATION_MODULE_TYPE","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_interactivityChecker","_ngZone","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_initializeWithAttachedContent","_setupFocusTrap","_capturePreviouslyFocusedElement","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_trapFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","addEventListener","removeAttribute","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","_focusTrap","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","_restoreFocus","previousElement","activeElement","body","contains","focusVia","destroy","create","ɵfac","ElementRef","FocusTrapFactory","ChangeDetectorRef","InteractivityChecker","NgZone","FocusMonitor","ɵdir","type","undefined","decorators","args","static","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","next","_onAnimationStart","_startExitAnimation","markForCheck","ɵcmp","encapsulation","None","changeDetection","Default","animations","host","template","styles","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","_id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","_dialogAnimatingOpen","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","_lastDialogRef","overlayRef","_createOverlay","_attachDialogContainer","animationStateSubscription","dialogAnimationEvent","unsubscribe","_animationStateSubscriptions","add","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","OverlayContainer","Type","MatDialog","location","defaultOptions","parentDialog","animationMode","Location","ɵprov","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","Promise","resolve","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, Subscription, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _interactivityChecker, _ngZone, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('blur', () => element.removeAttribute('tabindex'));\n                element.addEventListener('mousedown', () => element.removeAttribute('tabindex'));\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _MatDialogContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\", \"aria-modal\": \"true\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"id\": \"_id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_state\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        'aria-modal': 'true',\n                        '[id]': '_id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': '_state',\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef\n            .keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, _animationMode) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._animationMode = _animationMode;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        this._dialogAnimatingOpen = false;\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        // If there is a dialog that is currently animating open, return the MatDialogRef of that dialog\n        if (this._dialogAnimatingOpen) {\n            return this._lastDialogRef;\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        if (this._animationMode !== 'NoopAnimations') {\n            const animationStateSubscription = dialogContainer._animationStateChanged.subscribe(dialogAnimationEvent => {\n                if (dialogAnimationEvent.state === 'opening') {\n                    this._dialogAnimatingOpen = true;\n                }\n                if (dialogAnimationEvent.state === 'opened') {\n                    this._dialogAnimatingOpen = false;\n                    animationStateSubscription.unsubscribe();\n                }\n            });\n            if (!this._animationStateSubscriptions) {\n                this._animationStateSubscriptions = new Subscription();\n            }\n            this._animationStateSubscriptions.add(animationStateSubscription);\n        }\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        this._lastDialogRef = dialogRef;\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        // Clean up any subscriptions to dialogs that never finished opening.\n        if (this._animationStateSubscriptions) {\n            this._animationStateSubscriptions.unsubscribe();\n        }\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation,\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                $implicit: config.data,\n                dialogRef,\n            }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef },\n        ];\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _MatDialogBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer, animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", host: { classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: { 'class': 'mat-dialog-actions' },\n                }]\n        }] });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n"]},"metadata":{},"sourceType":"module"}